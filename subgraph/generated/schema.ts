// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("roundId", Value.fromBigInt(BigInt.zero()));
    this.set("depositAmount", Value.fromBigInt(BigInt.zero()));
    this.set("depositTickets", Value.fromBigInt(BigInt.zero()));
    this.set("holdAmount", Value.fromBigInt(BigInt.zero()));
    this.set("holdTickets", Value.fromBigInt(BigInt.zero()));
    this.set("tickets", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Player entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Player", id.toString(), this);
    }
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get roundId(): BigInt {
    let value = this.get("roundId");
    return value!.toBigInt();
  }

  set roundId(value: BigInt) {
    this.set("roundId", Value.fromBigInt(value));
  }

  get depositAmount(): BigInt {
    let value = this.get("depositAmount");
    return value!.toBigInt();
  }

  set depositAmount(value: BigInt) {
    this.set("depositAmount", Value.fromBigInt(value));
  }

  get depositTickets(): BigInt {
    let value = this.get("depositTickets");
    return value!.toBigInt();
  }

  set depositTickets(value: BigInt) {
    this.set("depositTickets", Value.fromBigInt(value));
  }

  get holdAmount(): BigInt {
    let value = this.get("holdAmount");
    return value!.toBigInt();
  }

  set holdAmount(value: BigInt) {
    this.set("holdAmount", Value.fromBigInt(value));
  }

  get holdTickets(): BigInt {
    let value = this.get("holdTickets");
    return value!.toBigInt();
  }

  set holdTickets(value: BigInt) {
    this.set("holdTickets", Value.fromBigInt(value));
  }

  get tickets(): BigInt {
    let value = this.get("tickets");
    return value!.toBigInt();
  }

  set tickets(value: BigInt) {
    this.set("tickets", Value.fromBigInt(value));
  }
}

export class AutoPoolPlayerJoiningHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("roundId", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AutoPoolPlayerJoiningHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AutoPoolPlayerJoiningHistory entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AutoPoolPlayerJoiningHistory", id.toString(), this);
    }
  }

  static load(id: string): AutoPoolPlayerJoiningHistory | null {
    return changetype<AutoPoolPlayerJoiningHistory | null>(
      store.get("AutoPoolPlayerJoiningHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get roundId(): BigInt {
    let value = this.get("roundId");
    return value!.toBigInt();
  }

  set roundId(value: BigInt) {
    this.set("roundId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
