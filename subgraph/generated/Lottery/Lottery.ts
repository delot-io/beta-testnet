// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AutoPoolDeposited extends ethereum.Event {
  get params(): AutoPoolDeposited__Params {
    return new AutoPoolDeposited__Params(this);
  }
}

export class AutoPoolDeposited__Params {
  _event: AutoPoolDeposited;

  constructor(event: AutoPoolDeposited) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AutoPoolWithdrawal extends ethereum.Event {
  get params(): AutoPoolWithdrawal__Params {
    return new AutoPoolWithdrawal__Params(this);
  }
}

export class AutoPoolWithdrawal__Params {
  _event: AutoPoolWithdrawal;

  constructor(event: AutoPoolWithdrawal) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Awarded extends ethereum.Event {
  get params(): Awarded__Params {
    return new Awarded__Params(this);
  }
}

export class Awarded__Params {
  _event: Awarded;

  constructor(event: Awarded) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CharityTransferred extends ethereum.Event {
  get params(): CharityTransferred__Params {
    return new CharityTransferred__Params(this);
  }
}

export class CharityTransferred__Params {
  _event: CharityTransferred;

  constructor(event: CharityTransferred) {
    this._event = event;
  }

  get roundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OperationTransferred extends ethereum.Event {
  get params(): OperationTransferred__Params {
    return new OperationTransferred__Params(this);
  }
}

export class OperationTransferred__Params {
  _event: OperationTransferred;

  constructor(event: OperationTransferred) {
    this._event = event;
  }

  get roundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PlayerDeposited extends ethereum.Event {
  get params(): PlayerDeposited__Params {
    return new PlayerDeposited__Params(this);
  }
}

export class PlayerDeposited__Params {
  _event: PlayerDeposited;

  constructor(event: PlayerDeposited) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isAuto(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PlayerUpdated extends ethereum.Event {
  get params(): PlayerUpdated__Params {
    return new PlayerUpdated__Params(this);
  }
}

export class PlayerUpdated__Params {
  _event: PlayerUpdated;

  constructor(event: PlayerUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get depositAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get depositTickets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get holdAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get holdTickets(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get tickets(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Lottery___roundsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }
}

export class Lottery__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class Lottery__getRoundPlayerInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Lottery__getRoundPlayerInfo2Result {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Lottery extends ethereum.SmartContract {
  static bind(address: Address): Lottery {
    return new Lottery("Lottery", address);
  }

  _activeRoundState(): i32 {
    let result = super.call(
      "_activeRoundState",
      "_activeRoundState():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try__activeRoundState(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "_activeRoundState",
      "_activeRoundState():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  _autoPoolBalance(): BigInt {
    let result = super.call(
      "_autoPoolBalance",
      "_autoPoolBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__autoPoolBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_autoPoolBalance",
      "_autoPoolBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _autoPoolUserBalance(param0: Address): BigInt {
    let result = super.call(
      "_autoPoolUserBalance",
      "_autoPoolUserBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try__autoPoolUserBalance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_autoPoolUserBalance",
      "_autoPoolUserBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _autoPoolUserIndex(param0: Address): BigInt {
    let result = super.call(
      "_autoPoolUserIndex",
      "_autoPoolUserIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try__autoPoolUserIndex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_autoPoolUserIndex",
      "_autoPoolUserIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _autoPoolUserJoiningAmount(param0: Address): BigInt {
    let result = super.call(
      "_autoPoolUserJoiningAmount",
      "_autoPoolUserJoiningAmount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try__autoPoolUserJoiningAmount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_autoPoolUserJoiningAmount",
      "_autoPoolUserJoiningAmount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _autoPoolUsers(param0: BigInt): Address {
    let result = super.call(
      "_autoPoolUsers",
      "_autoPoolUsers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try__autoPoolUsers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_autoPoolUsers",
      "_autoPoolUsers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _chainLinkVRFSubscriptionId(): BigInt {
    let result = super.call(
      "_chainLinkVRFSubscriptionId",
      "_chainLinkVRFSubscriptionId():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try__chainLinkVRFSubscriptionId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_chainLinkVRFSubscriptionId",
      "_chainLinkVRFSubscriptionId():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _charityAddress(): Address {
    let result = super.call(
      "_charityAddress",
      "_charityAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__charityAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_charityAddress",
      "_charityAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _endRoundState(): BigInt {
    let result = super.call("_endRoundState", "_endRoundState():(uint256)", []);

    return result[0].toBigInt();
  }

  try__endRoundState(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_endRoundState",
      "_endRoundState():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _informToPauseTheGame(): boolean {
    let result = super.call(
      "_informToPauseTheGame",
      "_informToPauseTheGame():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try__informToPauseTheGame(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_informToPauseTheGame",
      "_informToPauseTheGame():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _isGamePaused(): boolean {
    let result = super.call("_isGamePaused", "_isGamePaused():(bool)", []);

    return result[0].toBoolean();
  }

  try__isGamePaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("_isGamePaused", "_isGamePaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _minAutoJoiningAmount(): BigInt {
    let result = super.call(
      "_minAutoJoiningAmount",
      "_minAutoJoiningAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__minAutoJoiningAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_minAutoJoiningAmount",
      "_minAutoJoiningAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _minJoiningAmount(): BigInt {
    let result = super.call(
      "_minJoiningAmount",
      "_minJoiningAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__minJoiningAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_minJoiningAmount",
      "_minJoiningAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _numRounds(): BigInt {
    let result = super.call("_numRounds", "_numRounds():(uint256)", []);

    return result[0].toBigInt();
  }

  try__numRounds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_numRounds", "_numRounds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _numberOfPlayersToProcessAtEnd(): BigInt {
    let result = super.call(
      "_numberOfPlayersToProcessAtEnd",
      "_numberOfPlayersToProcessAtEnd():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__numberOfPlayersToProcessAtEnd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_numberOfPlayersToProcessAtEnd",
      "_numberOfPlayersToProcessAtEnd():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _numberOfPlayersToProcessAtStart(): BigInt {
    let result = super.call(
      "_numberOfPlayersToProcessAtStart",
      "_numberOfPlayersToProcessAtStart():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__numberOfPlayersToProcessAtStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_numberOfPlayersToProcessAtStart",
      "_numberOfPlayersToProcessAtStart():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _operationAddress(): Address {
    let result = super.call(
      "_operationAddress",
      "_operationAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__operationAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_operationAddress",
      "_operationAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _pIndex(): BigInt {
    let result = super.call("_pIndex", "_pIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try__pIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_pIndex", "_pIndex():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _roundCharityPayoutRatio(): BigInt {
    let result = super.call(
      "_roundCharityPayoutRatio",
      "_roundCharityPayoutRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__roundCharityPayoutRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_roundCharityPayoutRatio",
      "_roundCharityPayoutRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _roundDepositMultiplier(): BigInt {
    let result = super.call(
      "_roundDepositMultiplier",
      "_roundDepositMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__roundDepositMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_roundDepositMultiplier",
      "_roundDepositMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _roundDuration(): BigInt {
    let result = super.call("_roundDuration", "_roundDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try__roundDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_roundDuration",
      "_roundDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _roundHoldMultiplier(): BigInt {
    let result = super.call(
      "_roundHoldMultiplier",
      "_roundHoldMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__roundHoldMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_roundHoldMultiplier",
      "_roundHoldMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _roundWinnerPayoutRatio(): BigInt {
    let result = super.call(
      "_roundWinnerPayoutRatio",
      "_roundWinnerPayoutRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__roundWinnerPayoutRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_roundWinnerPayoutRatio",
      "_roundWinnerPayoutRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _roundWinnerRatios(param0: BigInt): BigInt {
    let result = super.call(
      "_roundWinnerRatios",
      "_roundWinnerRatios(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try__roundWinnerRatios(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_roundWinnerRatios",
      "_roundWinnerRatios(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _rounds(param0: BigInt): Lottery___roundsResult {
    let result = super.call(
      "_rounds",
      "_rounds(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Lottery___roundsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt()
    );
  }

  try__rounds(param0: BigInt): ethereum.CallResult<Lottery___roundsResult> {
    let result = super.tryCall(
      "_rounds",
      "_rounds(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lottery___roundsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt()
      )
    );
  }

  _token(): Address {
    let result = super.call("_token", "_token():(address)", []);

    return result[0].toAddress();
  }

  try__token(): ethereum.CallResult<Address> {
    let result = super.tryCall("_token", "_token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkUpkeep(param0: Bytes): Lottery__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new Lottery__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<Lottery__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lottery__checkUpkeepResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  getAutoPoolUsersLength(): BigInt {
    let result = super.call(
      "getAutoPoolUsersLength",
      "getAutoPoolUsersLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAutoPoolUsersLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAutoPoolUsersLength",
      "getAutoPoolUsersLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoundIndexWinners(Id: BigInt): Array<BigInt> {
    let result = super.call(
      "getRoundIndexWinners",
      "getRoundIndexWinners(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(Id)]
    );

    return result[0].toBigIntArray();
  }

  try_getRoundIndexWinners(Id: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getRoundIndexWinners",
      "getRoundIndexWinners(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(Id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRoundPlayerAddress(Id: BigInt, playerIndex: BigInt): Address {
    let result = super.call(
      "getRoundPlayerAddress",
      "getRoundPlayerAddress(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(Id),
        ethereum.Value.fromUnsignedBigInt(playerIndex)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoundPlayerAddress(
    Id: BigInt,
    playerIndex: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoundPlayerAddress",
      "getRoundPlayerAddress(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(Id),
        ethereum.Value.fromUnsignedBigInt(playerIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoundPlayerInfo(
    Id: BigInt,
    userAddress: Address
  ): Lottery__getRoundPlayerInfoResult {
    let result = super.call(
      "getRoundPlayerInfo",
      "getRoundPlayerInfo(uint256,address):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(Id),
        ethereum.Value.fromAddress(userAddress)
      ]
    );

    return new Lottery__getRoundPlayerInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getRoundPlayerInfo(
    Id: BigInt,
    userAddress: Address
  ): ethereum.CallResult<Lottery__getRoundPlayerInfoResult> {
    let result = super.tryCall(
      "getRoundPlayerInfo",
      "getRoundPlayerInfo(uint256,address):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(Id),
        ethereum.Value.fromAddress(userAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lottery__getRoundPlayerInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getRoundPlayerInfo2(
    Id: BigInt,
    index: BigInt
  ): Lottery__getRoundPlayerInfo2Result {
    let result = super.call(
      "getRoundPlayerInfo2",
      "getRoundPlayerInfo2(uint256,uint256):(address,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(Id),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return new Lottery__getRoundPlayerInfo2Result(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getRoundPlayerInfo2(
    Id: BigInt,
    index: BigInt
  ): ethereum.CallResult<Lottery__getRoundPlayerInfo2Result> {
    let result = super.tryCall(
      "getRoundPlayerInfo2",
      "getRoundPlayerInfo2(uint256,uint256):(address,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(Id),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lottery__getRoundPlayerInfo2Result(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getRoundWinnerRatios(Id: BigInt): Array<BigInt> {
    let result = super.call(
      "getRoundWinnerRatios",
      "getRoundWinnerRatios(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(Id)]
    );

    return result[0].toBigIntArray();
  }

  try_getRoundWinnerRatios(Id: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getRoundWinnerRatios",
      "getRoundWinnerRatios(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(Id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  hasUserJoinedActiveRound(addr: Address): boolean {
    let result = super.call(
      "hasUserJoinedActiveRound",
      "hasUserJoinedActiveRound(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBoolean();
  }

  try_hasUserJoinedActiveRound(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasUserJoinedActiveRound",
      "hasUserJoinedActiveRound(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasUserJoinedRound(roundId: BigInt, addr: Address): boolean {
    let result = super.call(
      "hasUserJoinedRound",
      "hasUserJoinedRound(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(roundId),
        ethereum.Value.fromAddress(addr)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasUserJoinedRound(
    roundId: BigInt,
    addr: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasUserJoinedRound",
      "hasUserJoinedRound(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(roundId),
        ethereum.Value.fromAddress(addr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isUserInAutoPool(userAddress: Address): boolean {
    let result = super.call(
      "isUserInAutoPool",
      "isUserInAutoPool(address):(bool)",
      [ethereum.Value.fromAddress(userAddress)]
    );

    return result[0].toBoolean();
  }

  try_isUserInAutoPool(userAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUserInAutoPool",
      "isUserInAutoPool(address):(bool)",
      [ethereum.Value.fromAddress(userAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get chainLinkVRFSubscriptionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ControlTheGameCall extends ethereum.Call {
  get inputs(): ControlTheGameCall__Inputs {
    return new ControlTheGameCall__Inputs(this);
  }

  get outputs(): ControlTheGameCall__Outputs {
    return new ControlTheGameCall__Outputs(this);
  }
}

export class ControlTheGameCall__Inputs {
  _call: ControlTheGameCall;

  constructor(call: ControlTheGameCall) {
    this._call = call;
  }

  get command(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ControlTheGameCall__Outputs {
  _call: ControlTheGameCall;

  constructor(call: ControlTheGameCall) {
    this._call = call;
  }
}

export class CudWinnerCall extends ethereum.Call {
  get inputs(): CudWinnerCall__Inputs {
    return new CudWinnerCall__Inputs(this);
  }

  get outputs(): CudWinnerCall__Outputs {
    return new CudWinnerCall__Outputs(this);
  }
}

export class CudWinnerCall__Inputs {
  _call: CudWinnerCall;

  constructor(call: CudWinnerCall) {
    this._call = call;
  }

  get command(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get pos(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ratio(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CudWinnerCall__Outputs {
  _call: CudWinnerCall;

  constructor(call: CudWinnerCall) {
    this._call = call;
  }
}

export class DepositToAutoPoolCall extends ethereum.Call {
  get inputs(): DepositToAutoPoolCall__Inputs {
    return new DepositToAutoPoolCall__Inputs(this);
  }

  get outputs(): DepositToAutoPoolCall__Outputs {
    return new DepositToAutoPoolCall__Outputs(this);
  }
}

export class DepositToAutoPoolCall__Inputs {
  _call: DepositToAutoPoolCall;

  constructor(call: DepositToAutoPoolCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositToAutoPoolCall__Outputs {
  _call: DepositToAutoPoolCall;

  constructor(call: DepositToAutoPoolCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class RawFulfillRandomWordsCall extends ethereum.Call {
  get inputs(): RawFulfillRandomWordsCall__Inputs {
    return new RawFulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomWordsCall__Outputs {
    return new RawFulfillRandomWordsCall__Outputs(this);
  }
}

export class RawFulfillRandomWordsCall__Inputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall__Outputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateChainLinkVRFCall extends ethereum.Call {
  get inputs(): UpdateChainLinkVRFCall__Inputs {
    return new UpdateChainLinkVRFCall__Inputs(this);
  }

  get outputs(): UpdateChainLinkVRFCall__Outputs {
    return new UpdateChainLinkVRFCall__Outputs(this);
  }
}

export class UpdateChainLinkVRFCall__Inputs {
  _call: UpdateChainLinkVRFCall;

  constructor(call: UpdateChainLinkVRFCall) {
    this._call = call;
  }

  get keyHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get callbackGasLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get requestConfirmations(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class UpdateChainLinkVRFCall__Outputs {
  _call: UpdateChainLinkVRFCall;

  constructor(call: UpdateChainLinkVRFCall) {
    this._call = call;
  }
}

export class UpdateMinAmountAndAddressCall extends ethereum.Call {
  get inputs(): UpdateMinAmountAndAddressCall__Inputs {
    return new UpdateMinAmountAndAddressCall__Inputs(this);
  }

  get outputs(): UpdateMinAmountAndAddressCall__Outputs {
    return new UpdateMinAmountAndAddressCall__Outputs(this);
  }
}

export class UpdateMinAmountAndAddressCall__Inputs {
  _call: UpdateMinAmountAndAddressCall;

  constructor(call: UpdateMinAmountAndAddressCall) {
    this._call = call;
  }

  get command(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get addr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class UpdateMinAmountAndAddressCall__Outputs {
  _call: UpdateMinAmountAndAddressCall;

  constructor(call: UpdateMinAmountAndAddressCall) {
    this._call = call;
  }
}

export class UpdateRoundParametersCall extends ethereum.Call {
  get inputs(): UpdateRoundParametersCall__Inputs {
    return new UpdateRoundParametersCall__Inputs(this);
  }

  get outputs(): UpdateRoundParametersCall__Outputs {
    return new UpdateRoundParametersCall__Outputs(this);
  }
}

export class UpdateRoundParametersCall__Inputs {
  _call: UpdateRoundParametersCall;

  constructor(call: UpdateRoundParametersCall) {
    this._call = call;
  }

  get roundDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get depositMultiplier(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get holdMultiplier(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get winnerRatio(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get charityRatio(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get ppNumberAtStart(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get ppNumberAtEnd(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class UpdateRoundParametersCall__Outputs {
  _call: UpdateRoundParametersCall;

  constructor(call: UpdateRoundParametersCall) {
    this._call = call;
  }
}

export class UserJoinActiveRoundCall extends ethereum.Call {
  get inputs(): UserJoinActiveRoundCall__Inputs {
    return new UserJoinActiveRoundCall__Inputs(this);
  }

  get outputs(): UserJoinActiveRoundCall__Outputs {
    return new UserJoinActiveRoundCall__Outputs(this);
  }
}

export class UserJoinActiveRoundCall__Inputs {
  _call: UserJoinActiveRoundCall;

  constructor(call: UserJoinActiveRoundCall) {
    this._call = call;
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UserJoinActiveRoundCall__Outputs {
  _call: UserJoinActiveRoundCall;

  constructor(call: UserJoinActiveRoundCall) {
    this._call = call;
  }
}

export class UserUpdateAutoPoolJoiningAmountCall extends ethereum.Call {
  get inputs(): UserUpdateAutoPoolJoiningAmountCall__Inputs {
    return new UserUpdateAutoPoolJoiningAmountCall__Inputs(this);
  }

  get outputs(): UserUpdateAutoPoolJoiningAmountCall__Outputs {
    return new UserUpdateAutoPoolJoiningAmountCall__Outputs(this);
  }
}

export class UserUpdateAutoPoolJoiningAmountCall__Inputs {
  _call: UserUpdateAutoPoolJoiningAmountCall;

  constructor(call: UserUpdateAutoPoolJoiningAmountCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UserUpdateAutoPoolJoiningAmountCall__Outputs {
  _call: UserUpdateAutoPoolJoiningAmountCall;

  constructor(call: UserUpdateAutoPoolJoiningAmountCall) {
    this._call = call;
  }
}

export class WithdrawFromAutoPoolCall extends ethereum.Call {
  get inputs(): WithdrawFromAutoPoolCall__Inputs {
    return new WithdrawFromAutoPoolCall__Inputs(this);
  }

  get outputs(): WithdrawFromAutoPoolCall__Outputs {
    return new WithdrawFromAutoPoolCall__Outputs(this);
  }
}

export class WithdrawFromAutoPoolCall__Inputs {
  _call: WithdrawFromAutoPoolCall;

  constructor(call: WithdrawFromAutoPoolCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawFromAutoPoolCall__Outputs {
  _call: WithdrawFromAutoPoolCall;

  constructor(call: WithdrawFromAutoPoolCall) {
    this._call = call;
  }
}
